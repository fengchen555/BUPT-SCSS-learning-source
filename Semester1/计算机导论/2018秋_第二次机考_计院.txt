题号: 2146,2148,2150,2151.
A.计算导论与程序设计第二次上机考试共出了4道题，
其中每名同学都至少做对了一道题。
根据已知条件求做对了2、3、4题的可能的人数。
输入只有一行，为两个正整数m和n分别代表参加考试的总人数和总的解题数。
输出有若干行，每一行为一组解，格式均为用空格分隔的三个整数，依次代表解2题的人数，解3题的人数和解4题的人数。多组解的输出顺序按解2题人数由小到大排序，如果解2题的人数相同则按解3题的人数由小到大排序。
所有测试数据保证可以用int存储。
输入样例
15 20
输出样例
0 1 1
1 2 0
2 0 1
3 1 0
5 0 0
-----------------------------------------
#include <stdio.h>
int main(){
	int m,n,r2,r3,r4;
	scanf("%d%d",&m,&n);
	for (r2=0; r2<=m; r2++)
		for(r3=0; r3<=m; r3++)
			for (r4=0; r4<=m; r4++)
			{
				if (m>=r2+r3+r4 && n==m+r2+r3*2+r4*3)
					printf("%d %d %d\n",r2,r3,r4);
			}	
	return 0;
}

B.请写一段程序求函数f(n) = (2n+1)!/((n+1)!n!) 的值。
输入为一个整数n(0<=n)。
输出为该函数的值（在long long的存储范围以内）。
输入样例
4
输出样例
126
-----------------------------------------------------------------------------
int main(){
    int n,i;
    long long ans=35;//=f(3)
    scanf("%lld",&n);
    if (n == 0){
        printf("%d\n",1);
        return 0;
    }
    if (n == 1){
        printf("%d\n",3);
        return 0;
    }
    if (n == 2){
        printf("%d\n",10);
        return 0;
    }
    for (i = 4;i<=n;i++){
        ans = ans * 2*2  - ans *2 /(i+1);
    }
    printf("%lld\n",ans);
    return 0;
}

C.假设不考虑回文数的长度限制，输入任意整数，设计一个回文数判定算法，判定并输出该数是否为回文数？
设计约束：
采用高位与低位比较的（首尾比较）算法思想，
采用迭代算法设计（禁用递归算法），
禁止使用数组。
设计要求：
1） 给出判定回文数的数学递归定义，要求使用数学方法表达高位与低位相等（假设已知该回文数的位数）；
2） 给出计算回文数位数的数学递归定义，要求使用数学方法表达；
3） 采用自定向下/逐步求精的方法，用N-S图表达计算回文数算法的TOP层设计，计算步骤不超过6步；（计算步骤可用自然语言描述）
4） 细化TOP层相应操作步骤，完成最终的算法，要求满足算法的5大特征。假设已有int power（x,y）函数可以调用，该函数功能是x的y次方。

输入：只有一行为两个整数num及len分别代表输入的整数及其长度（0<len<10）
输出：
前边若干行按比较顺序依次输出每行为参与比较的两个数（中间有一个空格），高位在前，低位在后。如果len为奇数，最后一次只有一个数字时，则将该数字输出2次。如果没有比较完就已知道不是回文数，要停止比较，后边的比较过程没有了，也就没有相应的输出。
最后一行：如果是回文数则输出Yes，否则输出No

输入样例

样例一：
121 3

样例二：
1234 4
输出样例

样例一：
1 1
2 2
Yes

样例二：
1 4
No

D.输入两个7进制正整数n和m（位数不超过5位），要求设计算法实现将两个7进制正整数相加，并打印输出计算结果。
设计约束：禁止使用数组
按10进制格式输入两个7进制正整数，将7进制数转换成10进制数，按10进制数进行运算，再将计算结果转换成7进制数，并将结果按10进制数组装，最后输出该结果。
例如： 36441+12135=51606
设计要求：
1) 给出7进制数转换到10进制数的计算方法（数学表达）；
2) 采用自顶向下/逐步求精的方法，用N-S图表示算法的TOP层设计，计算步骤不多于10步，计算步骤可用自然语言描述；
3) 用子程序设计（函数定义）细化计算步骤（N-S图），同时给出函数定义的头部
a) 7进制数转换为10进制数 函数名：any2d
b) 10进制数转换为7进制数并组装 函数名：d2any
输入只有一行，为用空格分隔的两个7进制正整数（长度不大于5）
输出也只有一行，格式见测试用例。括号内表示该数的进制，各个数字及运算符之间均有一个空格分隔
输入样例
36441 12135
输出样例
36441(7) + 12135(7) = 9486(10) + 3162(10) = 12648(10) = 51606(7)
----------------------------------------------------------------------------------------------
#include <stdio.h>
int any2d(int n,int base);
int d2any(int n,int base);
int main(){
	int m,n,dm,dn,sum;
	scanf("%d%d",&n,&m);
	
	dn=any2d(n,7);
	dm=any2d(m,7);
	sum=dn+dm;
	printf("%d(7)+%d(7)=%d(10)+%d(10)=%d(10)=%d(7)\n",n,m,dn,dm,sum,d2any(sum,7));
	
	return 0;
}	
int any2d(int n,int base){
	int p,tmp,result;
	for (tmp=n,result=0,p=1; tmp!=0; p*=base){
		result += (tmp%10)*p;
	}
	return result;
}
int d2any(int n,int base){
	int i,p,x,result;
	
 	for (i=0,p=1; p<=n; i++) p*=base;
	p = p/base; 
	for (result=0; p!=0; p/=base){
		x = n/p;
		result = result*10+x; //结果拼装为10进制整数 
		n = n%p;
	}
	
	return result;	
}
